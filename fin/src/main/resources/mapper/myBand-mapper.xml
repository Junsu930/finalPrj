<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="myBandMapper">
	<resultMap type="myBand" id="bandBoard_rm">
		<id property="boardNo" column="BOARD_NO"/>
		<result property="boardTitle" column="BOARD_TITLE"/>		
		<result property="boardContent" column="BOARD_CONTENT"/>		
		<result property="boardDate" column="T_CREATE_DATE"/>		
		<result property="readCount" column="READ_COUNT"/>		
		<result property="userNick" column="USER_NICK"/>		
		<result property="boardLike" column="BOARD_LIKE"/>		
		<result property="boardTag" column="BOARD_TAG"/>		
		<result property="bandName" column="BAND_NAME"/>		
		<result property="userNo" column="USER_NO"/>		
		<result property="bandNo" column="BAND_NO"/>		
	</resultMap>
	
	<resultMap type="myBand" id="zeroBand_rm">
		<id property="bandNo" column="BAND_NO"/>
		<result property="bandName" column="BAND_NAME"/>
	</resultMap>

	<resultMap type="myBandReply" id="myBandReply_rm">
		<id property="replyNo" column="REPLY_NO"/>
		<result property="replyContent" column="REPLY_CONTENT"/>
		<result property="replySt" column="REPLY_ST"/>
		<result property="replyDt" column="T_CREATE_DT"/>
		<result property="userNo" column="USER_NO"/>
		<result property="pReplyNo" column="PARENT_REPLY_NO"/>
		<result property="boardNo" column="BOARD_NO"/>	
		<result property="userNick" column="USER_NICK"/>	
		<result property="pNick" column="PARENT_NICK"/>	
	</resultMap>
	
	<select id="bandBoardList" parameterType="hashmap" resultMap="bandBoard_rm">
		SELECT *
		FROM (SELECT ROWNUM RN ,A.* FROM (SELECT BOARD_NO ,BOARD_TITLE, BOARD_CONTENT , CASE WHEN SYSDATE - CREATE_DATE &lt; 1
		THEN TO_CHAR(CREATE_DATE, 'HH:MI')
		ELSE TO_CHAR(CREATE_DATE, 'YYYY-MM-DD')
		END T_CREATE_DATE, CREATE_DATE , READ_COUNT , USER_NICK, BOARD_LIKE ,BOARD_TAG, BAND_NAME, USER_NO  
		FROM BAND_BOARD bb 
		JOIN "USER" USING(USER_NO) 
		JOIN BAND b USING(BAND_NO) 
		WHERE BAND_NO = ${bandNo} 
		AND BOARD_ST = 'Y' ORDER BY DECODE(BOARD_TAG,'공지',1), CREATE_DATE DESC) A) 
		WHERE RN &gt; (#{pageNum}-1) * #{amount} AND RN<![CDATA[<=]]> #{pageNum} * #{amount}
	</select>
	
	<select id="boardCheck" parameterType="_int" resultType="_int">
		SELECT COUNT(*) FROM BAND_BOARD bb WHERE BAND_NO = ${bandNo} AND BOARD_ST = 'Y'
	</select>
	
	<select id="zeroBand" parameterType="_int" resultMap="zeroBand_rm">
		SELECT BAND_NO, BAND_NAME FROM BAND WHERE BAND_NO = ${bandNo}
	</select>
	<select id="searcingBandList" parameterType="hashmap" resultMap="bandBoard_rm">
		SELECT *
		FROM (SELECT ROWNUM RN ,A.* FROM (SELECT BOARD_NO ,BOARD_TITLE, BOARD_CONTENT , CASE WHEN SYSDATE - CREATE_DATE &lt; 1
		THEN TO_CHAR(CREATE_DATE, 'HH:MI')
		ELSE TO_CHAR(CREATE_DATE, 'YYYY-MM-DD')
		END T_CREATE_DATE, CREATE_DATE , READ_COUNT , USER_NICK, BOARD_LIKE ,BOARD_TAG, BAND_NAME, USER_NO  
		FROM BAND_BOARD bb 
		JOIN "USER" USING(USER_NO) 
		JOIN BAND b USING(BAND_NO) 
		WHERE BAND_NO = ${bandNo}
		
		<choose>
			<when test="selectType == '제목'">
			AND BOARD_TITLE LIKE #{searcingText}
			</when>
			<when test="selectType == '내용'">
			AND BOARD_CONTENT LIKE #{searcingText}
			</when>
			<otherwise>
			AND (BOARD_TITLE LIKE #{searchingText} OR BOARD_CONTENT LIKE #{searchingText})
			</otherwise>
		</choose>
		AND BOARD_ST = 'Y' ORDER BY DECODE(BOARD_TAG,'공지',1), CREATE_DATE DESC) A) 
		WHERE RN &gt; (${pageNum}-1) * ${amount} AND RN<![CDATA[<=]]> ${pageNum} * ${amount}
	</select>
	
	<select id="leaderNick" parameterType="_int" resultType="string">
		SELECT USER_NICK FROM BAND_USER bu JOIN "USER" u USING(USER_NO) WHERE BAND_NO = ${bandNo} AND LEADER_FL = 'T'
	</select>
	
	<select id="bandMember" parameterType="_int" resultType="string">
		SELECT USER_NICK FROM BAND_USER bu JOIN "USER" u USING(USER_NO) WHERE BAND_NO = ${bandNo} AND LEADER_FL = 'F'
	</select>
	
	<select id="getTotal" parameterType="_int" resultType="_int">
		SELECT COUNT(*) FROM BAND_BOARD bb WHERE BAND_NO = ${bandNo} AND BOARD_ST='Y'
	</select>
	
	<select id="getSearchingTotal" parameterType="hashmap" resultType="_int">
		<choose>
			<when test="selectType == '제목'">
			SELECT COUNT(*) FROM BAND_BOARD bb WHERE BAND_NO = ${bandNo} AND BOARD_ST='Y' AND BOARD_TITLE LIKE #{searchingText}
			</when>
			<when test="selectType == '내용'">
			SELECT COUNT(*) FROM BAND_BOARD bb WHERE BAND_NO = ${bandNo} AND BOARD_ST='Y' AND BOARD_CONTENT LIKE #{searchingText}
			</when>
			<otherwise>
			SELECT COUNT(*) FROM BAND_BOARD bb WHERE BAND_NO = ${bandNo} AND BOARD_ST='Y' AND (BOARD_CONTENT LIKE #{searchingText} OR BOARD_TITLE LIKE #{searchingText})
			</otherwise>
		</choose>
	</select>
	
	<select id="bandUserFl" parameterType="hashmap" resultType="_int">
		SELECT COUNT(*) FROM BAND_USER WHERE BAND_NO  = ${bandNo} AND USER_NO = ${userNo} 
	</select>
	
	<insert id="writeBandBoard" parameterType="hashmap">
		INSERT INTO BAND_BOARD VALUES(BAND_BOARD_SEQ.NEXTVAL, #{title}, #{text}, SYSDATE, 0, 'Y', ${userNo}, 0, 'notag', ${bandNo})
	</insert>
	
	<select id="bandBoardDetail" parameterType="_int" resultMap="bandBoard_rm">
		SELECT BOARD_NO ,BOARD_TITLE, BOARD_CONTENT , CASE WHEN SYSDATE - CREATE_DATE &lt; 1
		THEN TO_CHAR(CREATE_DATE, 'HH:MI')
		ELSE TO_CHAR(CREATE_DATE, 'YYYY-MM-DD')
		END CREATE_DATE, READ_COUNT , USER_NICK, BOARD_LIKE ,BOARD_TAG, USER_NO, BAND_NO FROM BAND_BOARD bb 
		JOIN "USER" USING(USER_NO)
		WHERE BOARD_NO = ${boardNo}
	</select>
	
	<insert id="insertReplyForBandBoard" parameterType="hashmap">
		INSERT INTO BAND_BOARD_REPLY VALUES(REPLY_BAND_BOARD_SEQ.NEXTVAL, #{replyText}, 'Y', SYSDATE, ${loginUserNo}, NULL, ${boardNo})
	</insert>
	
	<select id="loadReplyForBandBoard" parameterType="_int" resultMap="myBandReply_rm">
		SELECT LEVEL,  R.* FROM
		    (SELECT REPLY_NO, REPLY_CONTENT,
	        TO_CHAR(CREATE_DT, 'YYYY"년" MM"월" DD"일" HH24"시" MI"분" SS"초"') CREATE_DT,
	        BOARD_NO, USER_NO, USER_NICK, (SELECT USER_NICK FROM "USER" WHERE USER_NO = (SELECT USER_NO FROM BAND_BOARD_REPLY bbr WHERE bbr.REPLY_NO = br.PARENT_REPLY_NO)) PARENT_NICK, PARENT_REPLY_NO, REPLY_ST
		    FROM BAND_BOARD_REPLY br
		    JOIN "USER" USING(USER_NO)
		    WHERE BOARD_NO = ${boardNo}) R
		WHERE REPLY_ST = 'Y'
		START WITH PARENT_REPLY_NO IS NULL
		CONNECT BY PRIOR REPLY_NO = PARENT_REPLY_NO
		ORDER SIBLINGS BY REPLY_NO
	</select>
	
	<select id="rCount" parameterType="_int" resultType="_int">
		SELECT COUNT(*) FROM BAND_BOARD_REPLY WHERE BOARD_NO = ${boardNo} AND REPLY_ST= 'Y'
	</select>
	
	<update id="updateBandBoard" parameterType="hashmap">
		UPDATE BAND_BOARD SET BOARD_TITLE = #{title}, BOARD_CONTENT = #{text} WHERE BOARD_NO = ${boardNo}
	</update>
	
	<update id="deleteBandBoardDetail" parameterType="_int">
		UPDATE BAND_BOARD SET BOARD_ST = 'N' WHERE BOARD_NO = ${boardNo}
	</update>
	
	<update id="updateReplyLogic" parameterType="hashmap">
		UPDATE BAND_BOARD_REPLY SET REPLY_CONTENT = #{replyText} WHERE REPLY_NO = ${replyNo}
	</update>
	
	<update id="deleteReplyForBandBoard" parameterType="_int">
		UPDATE BAND_BOARD_REPLY SET REPLY_ST = 'N' WHERE REPLY_NO = ${replyNo}
	</update>
	
	<update id="bandBoardCount" parameterType="_int">
		UPDATE BAND_BOARD SET READ_COUNT = READ_COUNT + 1 WHERE BOARD_NO = ${boardNo}
	</update>
	
	<select id="likeCheck" parameterType="hashmap" resultType="_int">
		SELECT COUNT(*) FROM BAND_BOARD_LIKE WHERE USER_NO = ${userNo} AND BOARD_NO = ${boardNo}
	</select>
	
	<insert id="likeLogic" parameterType="likeLogic">
		INSERT INTO BAND_BOARD_LIKE VALUES(BAND_BOARD_LIKE_SEQ.NEXTVAL, ${boardNo}, ${userNo})
	</insert>
	
	<delete id="unlikeLogic" parameterType="likeLogic">
		DELETE FROM BAND_BOARD_LIKE WHERE BOARD_NO = ${boardNo} AND USER_NO = ${userNo}
	</delete>
	
	<update id="likeUpdate" parameterType="likeLogic">
		UPDATE BAND_BOARD SET BOARD_LIKE = BOARD_LIKE +1 WHERE BOARD_NO = ${boardNo}
	</update>
	
	
	<update id="unlikeUpdate" parameterType="likeLogic">
		UPDATE BAND_BOARD SET BOARD_LIKE = BOARD_LIKE -1 WHERE BOARD_NO = ${boardNo}
	</update>
	
	<insert id="reReplyLogic" parameterType="map">
		INSERT INTO BAND_BOARD_REPLY bbr VALUES(REPLY_BAND_BOARD_SEQ.NEXTVAL, #{replyText}, 'Y', SYSDATE, ${userNo}, ${fatherReplyNo}, ${boardNo})
	</insert>
</mapper>
